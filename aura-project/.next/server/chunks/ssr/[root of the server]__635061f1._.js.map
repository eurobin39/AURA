{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/eurobae/AURA/Aura/aura-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst db = new PrismaClient();\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,KAAK,IAAI,6HAAA,CAAA,eAAY;uCAEZ","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///Users/eurobae/AURA/Aura/aura-project/app/login/actions.tsx"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\nimport { PASSWORD_REGEX } from \"@/lib/constants\";\nimport db from \"@/lib/db\";\nimport bcrypt from \"bcryptjs\";\nimport getSession from \"@/lib/session\";\nimport { redirect } from \"next/navigation\";\n\nconst checkEmailExists = async (email: string) => {\n    const user = await db.user.findUnique({\n        where: {\n            email,\n        },\n        select: {\n            id: true,\n        },\n    });\n    return Boolean(user);\n};\n\nconst formSchema = z.object({\n    email: z\n        .string()\n        .email()\n        .toLowerCase()\n        .refine(checkEmailExists, \"User does not exist\"),\n    password: z\n        .string(),\n        // .min(10)\n        // .regex(\n        //     PASSWORD_REGEX,\n        //     \"Password must have lowercase, UPPERCASE, number, and special character!\"\n        // ),\n});\n\nexport async function login(prevState: any, formData: FormData) {\n    const data = {\n        email: formData.get(\"email\"),\n        password: formData.get(\"password\"),\n    };\n\n    const result = await formSchema.safeParseAsync(data);\n\n    if (!result.success) {\n        return result.error.flatten();\n    } else {\n        const user = await db.user.findUnique({\n            where: {\n                email: result.data.email,\n            },\n            select: {\n                id: true,\n                password: true,\n            },\n        });\n\n        const ok = await bcrypt.compare(result.data.password, user?.password ?? \"xxxx\");\n\n        \n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AACA;;;;;;;AAIA,MAAM,mBAAmB,OAAO;IAC5B,MAAM,OAAO,MAAM,yGAAA,CAAA,UAAE,CAAC,IAAI,CAAC,UAAU,CAAC;QAClC,OAAO;YACH;QACJ;QACA,QAAQ;YACJ,IAAI;QACR;IACJ;IACA,OAAO,QAAQ;AACnB;AAEA,MAAM,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxB,OAAO,oIAAA,CAAA,IAAC,CACH,MAAM,GACN,KAAK,GACL,WAAW,GACX,MAAM,CAAC,kBAAkB;IAC9B,UAAU,oIAAA,CAAA,IAAC,CACN,MAAM;AAMf;AAEO,eAAe,uCAAG,GAAH,MAAM,SAAc,EAAE,QAAkB;IAC1D,MAAM,OAAO;QACT,OAAO,SAAS,GAAG,CAAC;QACpB,UAAU,SAAS,GAAG,CAAC;IAC3B;IAEA,MAAM,SAAS,MAAM,WAAW,cAAc,CAAC;IAE/C,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,OAAO,OAAO,KAAK,CAAC,OAAO;IAC/B,OAAO;QACH,MAAM,OAAO,MAAM,yGAAA,CAAA,UAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,OAAO;gBACH,OAAO,OAAO,IAAI,CAAC,KAAK;YAC5B;YACA,QAAQ;gBACJ,IAAI;gBACJ,UAAU;YACd;QACJ;QAEA,MAAM,KAAK,MAAM,iIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,QAAQ,EAAE,MAAM,YAAY;IAG5E;AACJ;;;IAzBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/eurobae/AURA/Aura/aura-project/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/eurobae/AURA/Aura/aura-project/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkQ,GAC/R,gCACA","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}