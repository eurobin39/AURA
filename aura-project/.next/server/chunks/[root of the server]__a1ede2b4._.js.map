{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/eurobae/AURA/Aura/aura-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst db = new PrismaClient();\n\nexport default db;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,KAAK,IAAI,6HAAA,CAAA,eAAY;uCAEZ","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/eurobae/AURA/Aura/aura-project/lib/session.ts"],"sourcesContent":["import { getIronSession } from \"iron-session\";\nimport { cookies } from \"next/headers\";\n\ninterface SessionContent {\n    id?: number;\n}\n\nexport default async function getSession() {\n    const cookieStore = await cookies();\n    return getIronSession<SessionContent>(cookieStore, {\n        cookieName: \"delicious-karrot\",\n        password: process.env.COOKIE_PASSWORD!,\n    });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AAMe,eAAe;IAC1B,MAAM,cAAc,MAAM,CAAA,GAAA,wHAAA,CAAA,UAAO,AAAD;IAChC,OAAO,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAkB,aAAa;QAC/C,YAAY;QACZ,UAAU,QAAQ,GAAG,CAAC,eAAe;IACzC;AACJ","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///Users/eurobae/AURA/Aura/aura-project/pages/api/focus-log.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport db from \"@/lib/db\"; // Prisma client\nimport getSession from \"@/lib/session\"; // iron-session wrapper\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const session = await getSession();\n\n  if (!session.id) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n\n  const userId = session.id;\n\n  if (req.method === \"GET\") {\n    try {\n      const logs = await db.focusLog.findMany({\n        where: { userId },\n        orderBy: { timestamp: \"desc\" },\n        take: 10,\n      });\n      return res.status(200).json(logs);\n    } catch (err) {\n      console.error(\"ðŸ”¥ GET focus logs error:\", err);\n      return res.status(500).json({ error: \"Failed to fetch focus logs\" });\n    }\n  }\n\n  if (req.method === \"POST\") {\n    const { keyboard, mouseClicks, mouseDistance, focusScore } = req.body;\n\n    try {\n      const log = await db.focusLog.create({\n        data: {\n          keyboard,\n          mouseClicks,\n          mouseDistance,\n          focusScore,\n          userId,\n        },\n      });\n      return res.status(201).json(log);\n    } catch (err) {\n      console.error(\"ðŸ”¥ POST focus log error:\", err);\n      return res.status(500).json({ error: \"Failed to save focus log\" });\n    }\n  }\n\n  return res.status(405).json({ error: \"Method not allowed\" });\n}\n"],"names":[],"mappings":";;;AACA,4KAA2B,gBAAgB;AAC3C,sLAAwC,uBAAuB;;;;;;;AAEhD,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC7E,MAAM,UAAU,MAAM,CAAA,GAAA,uGAAA,CAAA,UAAU,AAAD;IAE/B,IAAI,CAAC,QAAQ,EAAE,EAAE;QACf,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAe;IACtD;IAEA,MAAM,SAAS,QAAQ,EAAE;IAEzB,IAAI,IAAI,MAAM,KAAK,OAAO;QACxB,IAAI;YACF,MAAM,OAAO,MAAM,kGAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBACtC,OAAO;oBAAE;gBAAO;gBAChB,SAAS;oBAAE,WAAW;gBAAO;gBAC7B,MAAM;YACR;YACA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAC9B,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAA6B;QACpE;IACF;IAEA,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,IAAI,IAAI;QAErE,IAAI;YACF,MAAM,MAAM,MAAM,kGAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACnC,MAAM;oBACJ;oBACA;oBACA;oBACA;oBACA;gBACF;YACF;YACA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAC9B,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAA2B;QAClE;IACF;IAEA,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,OAAO;IAAqB;AAC5D","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}